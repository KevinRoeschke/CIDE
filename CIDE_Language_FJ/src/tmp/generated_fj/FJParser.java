/* Generated By:JavaCC: Do not edit this line. FJParser.java */
package tmp.generated_fj;
import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;


/**
 * Grammar to parse Java version 1.5
 * @author Sreenivasa Viswanadha - Simplified and enhanced for 1.5
 */
public class FJParser implements FJParserConstants {
   public FJParser(String fileName)
   {
      this(System.in);
      try { ReInit(new FileInputStream(new File(fileName))); }
      catch(Exception e) { e.printStackTrace(); }
   }

  public static void main(String args[]) {
    FJParser parser;
    if (args.length == 0) {
      System.out.println("Featherweigth Java Parser Version 1.1:  Reading from standard input . . .");
      parser = new FJParser(System.in);
    } else if (args.length == 1) {
      System.out.println("Featherweigth Java Parser Version 1.1:  Reading from file " + args[0] + " . . .");
      try {
        parser = new FJParser(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("Featherweigth Java Parser Version 1.1:  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("Featherweigth Java Parser Version 1.1:  Usage is one of:");
      System.out.println("         java JavaParser < inputfile");
      System.out.println("OR");
      System.out.println("         java JavaParser inputfile");
      return;
    }
    try {
      parser.Goal();
      System.out.println("Featherweigth Java Parser Version 1.1:  Java program parsed successfully.");
    } catch (ParseException e) {
      System.out.println(e.getMessage());
      System.out.println("Featherweigth Java Parser Version 1.1:  Encountered errors during parse.");
      e.printStackTrace(System.out);
    }
  }

  public FJParser(InputStream inputStream) {
        this(new OffsetCharStream(inputStream));
  }
  private void ReInit(InputStream inputStream) {
        ReInit(new OffsetCharStream(inputStream));
  }

   public ISourceFile getRoot() throws ParseException {
                return Goal();
   }

  final public Goal Goal() throws ParseException {
        TypeDeclaration typeDeclaration;
        Token t;
        ASTStringNode eof;
        Token firstToken=token;
    typeDeclaration = TypeDeclaration();
    t = jj_consume_token(0);
                                                  eof=new ASTStringNode(t.toString(),new WToken(t));
         {if (true) return new Goal(typeDeclaration, eof, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public TypeDeclaration TypeDeclaration() throws ParseException {
        Token t;
        ASTStringNode identifier;
        ExtendedType extendedType;
        VarDeclaration varDeclaration;
        ArrayList<VarDeclaration> varDeclarationList = new ArrayList<VarDeclaration>();
        ClassConstructor classConstructor;
        MethodDeclaration methodDeclaration;
        ArrayList<MethodDeclaration> methodDeclarationList = new ArrayList<MethodDeclaration>();
        Token firstToken=token;
    jj_consume_token(CLASS);
    t = jj_consume_token(IDENTIFIER);
                               identifier=new ASTStringNode(t.toString(),new WToken(t));
    jj_consume_token(EXTENDS);
    extendedType = ExtendedType();
    jj_consume_token(LBRACE);
    label_1:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
      varDeclaration = VarDeclaration();
                                                                                                                                                                                  varDeclarationList.add(varDeclaration);
    }
    classConstructor = ClassConstructor();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OBJECT:
      case INT:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_2;
      }
      methodDeclaration = MethodDeclaration();
                                                                                                                                                                                                                                                                                                        methodDeclarationList.add(methodDeclaration);
    }
    jj_consume_token(RBRACE);
         {if (true) return new TypeDeclaration(identifier, extendedType, varDeclarationList, classConstructor, methodDeclarationList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ExtendedType ExtendedType() throws ParseException {
        Token t;
        ASTStringNode identifier;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                       identifier=new ASTStringNode(t.toString(),new WToken(t));
         {if (true) return new ExtendedType1(identifier, firstToken.next,token);}
      break;
    case OBJECT:
      jj_consume_token(OBJECT);
         {if (true) return new ExtendedType2(firstToken.next,token);}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public VarDeclaration VarDeclaration() throws ParseException {
        Type type;
        Token t;
        ASTStringNode identifier;
        Token firstToken=token;
    type = Type();
    t = jj_consume_token(IDENTIFIER);
                                   identifier=new ASTStringNode(t.toString(),new WToken(t));
    jj_consume_token(38);
         {if (true) return new VarDeclaration(type, identifier, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ClassConstructor ClassConstructor() throws ParseException {
        Type type;
        FormalParameterList formalParameterList = null;
        ExpressionList expressionList = null;
        FieldAssign fieldAssign;
        ArrayList<FieldAssign> fieldAssignList = new ArrayList<FieldAssign>();
        Token firstToken=token;
    type = Type();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OBJECT:
    case INT:
    case IDENTIFIER:
      formalParameterList = FormalParameterList();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    jj_consume_token(SUPER);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THIS:
    case NEW:
    case INTEGER_LITERAL:
    case IDENTIFIER:
    case LPAREN:
      expressionList = ExpressionList();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(38);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case THIS:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      fieldAssign = FieldAssign();
                                                                                                                                                             fieldAssignList.add(fieldAssign);
    }
    jj_consume_token(RBRACE);
         {if (true) return new ClassConstructor(type, formalParameterList, expressionList, fieldAssignList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public FieldAssign FieldAssign() throws ParseException {
        Token t;
        ASTStringNode identifier;
        ASTStringNode identifier1;
        Token firstToken=token;
    jj_consume_token(THIS);
    jj_consume_token(DOT);
    t = jj_consume_token(IDENTIFIER);
                                  identifier=new ASTStringNode(t.toString(),new WToken(t));
    jj_consume_token(39);
    t = jj_consume_token(IDENTIFIER);
                                                                                                                identifier1=new ASTStringNode(t.toString(),new WToken(t));
    jj_consume_token(38);
         {if (true) return new FieldAssign(identifier, identifier1, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public MethodDeclaration MethodDeclaration() throws ParseException {
        Type type;
        Token t;
        ASTStringNode identifier;
        FormalParameterList formalParameterList = null;
        Expression expression;
        Token firstToken=token;
    type = Type();
    t = jj_consume_token(IDENTIFIER);
                                   identifier=new ASTStringNode(t.toString(),new WToken(t));
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OBJECT:
    case INT:
    case IDENTIFIER:
      formalParameterList = FormalParameterList();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    jj_consume_token(RETURN);
    expression = Expression();
    jj_consume_token(38);
    jj_consume_token(RBRACE);
         {if (true) return new MethodDeclaration(type, identifier, formalParameterList, expression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public BinaryOperator BinaryOperator() throws ParseException {
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
         {if (true) return new BinaryOperator1(firstToken.next,token);}
      break;
    case MINUS:
      jj_consume_token(MINUS);
         {if (true) return new BinaryOperator2(firstToken.next,token);}
      break;
    case STAR:
      jj_consume_token(STAR);
         {if (true) return new BinaryOperator3(firstToken.next,token);}
      break;
    case SLASH:
      jj_consume_token(SLASH);
         {if (true) return new BinaryOperator4(firstToken.next,token);}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FormalParameterList FormalParameterList() throws ParseException {
        FormalParameter formalParameter;
        FormalParameterRest formalParameterRest;
        ArrayList<FormalParameterRest> formalParameterRestList = new ArrayList<FormalParameterRest>();
        Token firstToken=token;
    formalParameter = FormalParameter();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      formalParameterRest = FormalParameterRest();
                                                                                     formalParameterRestList.add(formalParameterRest);
    }
         {if (true) return new FormalParameterList(formalParameter, formalParameterRestList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public FormalParameter FormalParameter() throws ParseException {
        Type type;
        Token t;
        ASTStringNode identifier;
        Token firstToken=token;
    type = Type();
    t = jj_consume_token(IDENTIFIER);
                                   identifier=new ASTStringNode(t.toString(),new WToken(t));
         {if (true) return new FormalParameter(type, identifier, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public FormalParameterRest FormalParameterRest() throws ParseException {
        FormalParameter formalParameter;
        Token firstToken=token;
    jj_consume_token(COMMA);
    formalParameter = FormalParameter();
         {if (true) return new FormalParameterRest(formalParameter, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public Type Type() throws ParseException {
        Token t;
        ASTStringNode identifier;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
         {if (true) return new Type1(firstToken.next,token);}
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                       identifier=new ASTStringNode(t.toString(),new WToken(t));
         {if (true) return new Type2(identifier, firstToken.next,token);}
      break;
    case OBJECT:
      jj_consume_token(OBJECT);
         {if (true) return new Type3(firstToken.next,token);}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression Expression() throws ParseException {
        Term term;
        PlusOrMinus plusOrMinus;
        ArrayList<PlusOrMinus> plusOrMinusList = new ArrayList<PlusOrMinus>();
        Token firstToken=token;
    term = Term();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_5;
      }
      plusOrMinus = PlusOrMinus();
                                               plusOrMinusList.add(plusOrMinus);
    }
         {if (true) return new Expression(term, plusOrMinusList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public PlusOrMinus PlusOrMinus() throws ParseException {
        PlusExpressionRest plusExpressionRest;
        MinusExpressionRest minusExpressionRest;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      plusExpressionRest = PlusExpressionRest();
         {if (true) return new PlusOrMinus1(plusExpressionRest, firstToken.next,token);}
      break;
    case MINUS:
      minusExpressionRest = MinusExpressionRest();
         {if (true) return new PlusOrMinus2(minusExpressionRest, firstToken.next,token);}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public PlusExpressionRest PlusExpressionRest() throws ParseException {
        Term term;
        Token firstToken=token;
    jj_consume_token(PLUS);
    term = Term();
         {if (true) return new PlusExpressionRest(term, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public MinusExpressionRest MinusExpressionRest() throws ParseException {
        Term term;
        Token firstToken=token;
    jj_consume_token(MINUS);
    term = Term();
         {if (true) return new MinusExpressionRest(term, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public Term Term() throws ParseException {
        PrimaryExpression primaryExpression;
        TimesOrDivide timesOrDivide;
        ArrayList<TimesOrDivide> timesOrDivideList = new ArrayList<TimesOrDivide>();
        Token firstToken=token;
    primaryExpression = PrimaryExpression();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_6;
      }
      timesOrDivide = TimesOrDivide();
                                                                             timesOrDivideList.add(timesOrDivide);
    }
         {if (true) return new Term(primaryExpression, timesOrDivideList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public TimesOrDivide TimesOrDivide() throws ParseException {
        TimesExpressionRest timesExpressionRest;
        DivideExpressionRest divideExpressionRest;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
      timesExpressionRest = TimesExpressionRest();
         {if (true) return new TimesOrDivide1(timesExpressionRest, firstToken.next,token);}
      break;
    case SLASH:
      divideExpressionRest = DivideExpressionRest();
         {if (true) return new TimesOrDivide2(divideExpressionRest, firstToken.next,token);}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public TimesExpressionRest TimesExpressionRest() throws ParseException {
        PrimaryExpression primaryExpression;
        Token firstToken=token;
    jj_consume_token(STAR);
    primaryExpression = PrimaryExpression();
         {if (true) return new TimesExpressionRest(primaryExpression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public DivideExpressionRest DivideExpressionRest() throws ParseException {
        PrimaryExpression primaryExpression;
        Token firstToken=token;
    jj_consume_token(SLASH);
    primaryExpression = PrimaryExpression();
         {if (true) return new DivideExpressionRest(primaryExpression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public PrimaryExpression PrimaryExpression() throws ParseException {
        Token t;
        ASTStringNode integer_literal;
        MethodInvoke methodInvoke;
        FieldInvoke fieldInvoke;
        ASTStringNode identifier;
        AllocationExpression allocationExpression;
        CastExpression castExpression;
        NestedExpression nestedExpression;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
                            integer_literal=new ASTStringNode(t.toString(),new WToken(t));
         {if (true) return new PrimaryExpression1(integer_literal, firstToken.next,token);}
      break;
    default:
      jj_la1[13] = jj_gen;
      if (jj_2_2(2147483647)) {
        methodInvoke = MethodInvoke();
         {if (true) return new PrimaryExpression2(methodInvoke, firstToken.next,token);}
      } else if (jj_2_3(2147483647)) {
        fieldInvoke = FieldInvoke();
         {if (true) return new PrimaryExpression3(fieldInvoke, firstToken.next,token);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          t = jj_consume_token(IDENTIFIER);
                       identifier=new ASTStringNode(t.toString(),new WToken(t));
         {if (true) return new PrimaryExpression4(identifier, firstToken.next,token);}
          break;
        default:
          jj_la1[14] = jj_gen;
          if (jj_2_4(2147483647)) {
            allocationExpression = AllocationExpression();
         {if (true) return new PrimaryExpression5(allocationExpression, firstToken.next,token);}
          } else if (jj_2_5(2147483647)) {
            castExpression = CastExpression();
         {if (true) return new PrimaryExpression6(castExpression, firstToken.next,token);}
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LPAREN:
              nestedExpression = NestedExpression();
         {if (true) return new PrimaryExpression7(nestedExpression, firstToken.next,token);}
              break;
            default:
              jj_la1[15] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public MethodInvoke MethodInvoke() throws ParseException {
        InvokeTarget invokeTarget;
        Token t;
        ASTStringNode identifier;
        ExpressionList expressionList = null;
        Token firstToken=token;
    invokeTarget = InvokeTarget();
    jj_consume_token(DOT);
    t = jj_consume_token(IDENTIFIER);
                                                       identifier=new ASTStringNode(t.toString(),new WToken(t));
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THIS:
    case NEW:
    case INTEGER_LITERAL:
    case IDENTIFIER:
    case LPAREN:
      expressionList = ExpressionList();
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
         {if (true) return new MethodInvoke(invokeTarget, identifier, expressionList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public FieldInvoke FieldInvoke() throws ParseException {
        InvokeTarget invokeTarget;
        Token t;
        ASTStringNode identifier;
        Token firstToken=token;
    invokeTarget = InvokeTarget();
    jj_consume_token(DOT);
    t = jj_consume_token(IDENTIFIER);
                                                       identifier=new ASTStringNode(t.toString(),new WToken(t));
         {if (true) return new FieldInvoke(invokeTarget, identifier, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public InvokeTarget InvokeTarget() throws ParseException {
        AllocationExpression allocationExpression;
        NestedExpression nestedExpression;
        Token t;
        ASTStringNode identifier;
        Token firstToken=token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
      allocationExpression = AllocationExpression();
         {if (true) return new InvokeTarget1(allocationExpression, firstToken.next,token);}
      break;
    case LPAREN:
      nestedExpression = NestedExpression();
         {if (true) return new InvokeTarget2(nestedExpression, firstToken.next,token);}
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                       identifier=new ASTStringNode(t.toString(),new WToken(t));
         {if (true) return new InvokeTarget3(identifier, firstToken.next,token);}
      break;
    case THIS:
      jj_consume_token(THIS);
         {if (true) return new InvokeTarget4(firstToken.next,token);}
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public AllocationExpression AllocationExpression() throws ParseException {
        Token t;
        ASTStringNode identifier;
        ExpressionList expressionList = null;
        Token firstToken=token;
    jj_consume_token(NEW);
    t = jj_consume_token(IDENTIFIER);
                             identifier=new ASTStringNode(t.toString(),new WToken(t));
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THIS:
    case NEW:
    case INTEGER_LITERAL:
    case IDENTIFIER:
    case LPAREN:
      expressionList = ExpressionList();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
         {if (true) return new AllocationExpression(identifier, expressionList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public CastExpression CastExpression() throws ParseException {
        Type type;
        PrimaryExpression primaryExpression;
        Token firstToken=token;
    jj_consume_token(LPAREN);
    type = Type();
    jj_consume_token(RPAREN);
    primaryExpression = PrimaryExpression();
         {if (true) return new CastExpression(type, primaryExpression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public NestedExpression NestedExpression() throws ParseException {
        Expression expression;
        Token firstToken=token;
    jj_consume_token(LPAREN);
    expression = Expression();
    jj_consume_token(RPAREN);
         {if (true) return new NestedExpression(expression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionList ExpressionList() throws ParseException {
        Expression expression;
        ExpressionRest expressionRest;
        ArrayList<ExpressionRest> expressionRestList = new ArrayList<ExpressionRest>();
        Token firstToken=token;
    expression = Expression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_7;
      }
      expressionRest = ExpressionRest();
                                                                 expressionRestList.add(expressionRest);
    }
         {if (true) return new ExpressionList(expression, expressionRestList, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionRest ExpressionRest() throws ParseException {
        Expression expression;
        Token firstToken=token;
    jj_consume_token(COMMA);
    expression = Expression();
         {if (true) return new ExpressionRest(expression, firstToken.next,token);}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_3R_42() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3R_10() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_8()) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    return false;
  }

  final private boolean jj_3R_9() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_3R_32()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_33()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_12()) return true;
    return false;
  }

  final private boolean jj_3R_8() {
    if (jj_3R_13()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_11()) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_scan_token(OBJECT)) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_10()) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_9()) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_3R_30()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_31()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_scan_token(SLASH)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_scan_token(STAR)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_12() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_13()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    return false;
  }

  final private boolean jj_3R_11() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_3R_17()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_35()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_3R_11()) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  public FJParserTokenManager token_source;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[20];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x2024000,0x2004000,0x2024000,0x12242000,0x2000,0x2024000,0x0,0x0,0x2024000,0x0,0x0,0x0,0x0,0x200000,0x2000000,0x10000000,0x12242000,0x12042000,0x12242000,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x3c,0x1,0x0,0xc,0xc,0x30,0x30,0x0,0x0,0x0,0x0,0x0,0x0,0x1,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[5];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public FJParser(CharStream stream) {
    token_source = new FJParserTokenManager(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public FJParser(FJParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(FJParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[40];
    for (int i = 0; i < 40; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 20; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 40; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
